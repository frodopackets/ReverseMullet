AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bedrock Nova Lite Chat API - Lambda Functions and API Gateway'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    Description: 'Environment name (dev, staging, prod)'

Resources:
  # IAM Role for Lambda Functions
  BedrockLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'bedrock-chat-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/*'

  # Chat Lambda Function (Direct Bedrock)
  ChatLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'bedrock-chat-${Environment}'
      Runtime: nodejs18.x
      Handler: chat-handler.handler
      Role: !GetAtt BedrockLambdaRole.Arn
      Code:
        ZipFile: |
          const { BedrockRuntimeClient, InvokeModelCommand } = require('@aws-sdk/client-bedrock-runtime');
          const client = new BedrockRuntimeClient({ region: process.env.AWS_REGION || 'us-east-1' });
          exports.handler = async (event) => {
            const headers = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type',
              'Access-Control-Allow-Methods': 'POST, OPTIONS',
              'Content-Type': 'application/json'
            };
            if (event.httpMethod === 'OPTIONS') {
              return { statusCode: 200, headers, body: '' };
            }
            try {
              const { message } = JSON.parse(event.body);
              if (!message || typeof message !== 'string') {
                return {
                  statusCode: 400,
                  headers,
                  body: JSON.stringify({ error: 'Message is required and must be a string' })
                };
              }
              const modelId = 'amazon.nova-lite-v1:0';
              const payload = {
                messages: [{ role: 'user', content: [{ text: message }] }],
                inferenceConfig: { maxTokens: 1000, temperature: 0.7, topP: 0.9 }
              };
              const command = new InvokeModelCommand({
                modelId,
                body: JSON.stringify(payload),
                contentType: 'application/json',
                accept: 'application/json',
              });
              const response = await client.send(command);
              if (!response.body) throw new Error('No response body from Bedrock');
              const responseBody = JSON.parse(new TextDecoder().decode(response.body));
              const assistantMessage = responseBody.output?.message?.content?.[0]?.text || 'Sorry, I could not generate a response.';
              const result = {
                id: `assistant-${Date.now()}`,
                content: assistantMessage,
                role: 'assistant',
                timestamp: new Date().toISOString()
              };
              return { statusCode: 200, headers, body: JSON.stringify(result) };
            } catch (error) {
              console.error('Bedrock API Error:', error);
              return {
                statusCode: 500,
                headers,
                body: JSON.stringify({
                  id: `error-${Date.now()}`,
                  content: 'I apologize, but I encountered an error while processing your request. Please try again.',
                  role: 'assistant',
                  timestamp: new Date().toISOString()
                })
              };
            }
          };
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
      Timeout: 30

  # Router Chat Lambda Function (Intelligent Agent Routing)
  RouterChatLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'bedrock-router-chat-${Environment}'
      Runtime: nodejs18.x
      Handler: router-chat-handler.handler
      Role: !GetAtt BedrockLambdaRole.Arn
      Code:
        ZipFile: |
          // Placeholder - will be replaced with actual router-chat-handler.js during deployment
          exports.handler = async (event) => {
            const headers = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type, Authorization',
              'Access-Control-Allow-Methods': 'POST, OPTIONS',
              'Content-Type': 'application/json'
            };
            if (event.httpMethod === 'OPTIONS') {
              return { statusCode: 200, headers, body: '' };
            }
            return {
              statusCode: 200,
              headers,
              body: JSON.stringify({
                id: `assistant-${Date.now()}`,
                content: 'Router agent is being configured. Please try again shortly.',
                role: 'assistant',
                timestamp: new Date().toISOString(),
                agent_type: 'configuration_pending',
                intent_analysis: { intent: 'system_setup', confidence: 'high' }
              })
            };
          };
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
      Timeout: 30

  # Health Lambda Function
  HealthLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'bedrock-health-${Environment}'
      Runtime: nodejs18.x
      Handler: health-handler.handler
      Role: !GetAtt BedrockLambdaRole.Arn
      Code:
        ZipFile: |
          const { BedrockRuntimeClient, InvokeModelCommand } = require('@aws-sdk/client-bedrock-runtime');
          const client = new BedrockRuntimeClient({ region: process.env.AWS_REGION || 'us-east-1' });
          exports.handler = async (event) => {
            const headers = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type',
              'Access-Control-Allow-Methods': 'GET, OPTIONS',
              'Content-Type': 'application/json'
            };
            if (event.httpMethod === 'OPTIONS') {
              return { statusCode: 200, headers, body: '' };
            }
            try {
              const modelId = 'amazon.nova-lite-v1:0';
              const payload = {
                messages: [{ role: 'user', content: [{ text: 'Hello' }] }],
                inferenceConfig: { maxTokens: 10, temperature: 0.1, topP: 0.9 }
              };
              const command = new InvokeModelCommand({
                modelId,
                body: JSON.stringify(payload),
                contentType: 'application/json',
                accept: 'application/json',
              });
              await client.send(command);
              return {
                statusCode: 200,
                headers,
                body: JSON.stringify({
                  status: 'healthy',
                  bedrock: true,
                  model: 'amazon.nova-lite-v1:0',
                  timestamp: new Date().toISOString()
                })
              };
            } catch (error) {
              console.error('Health check failed:', error);
              return {
                statusCode: 500,
                headers,
                body: JSON.stringify({
                  status: 'unhealthy',
                  bedrock: false,
                  error: 'Health check failed',
                  model: 'amazon.nova-lite-v1:0',
                  timestamp: new Date().toISOString()
                })
              };
            }
          };
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
      Timeout: 30

  # API Gateway
  BedrockApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'bedrock-chat-api-${Environment}'
      Description: 'API Gateway for Bedrock Nova Lite Chat'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  ChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockApiGateway
      ParentId: !GetAtt BedrockApiGateway.RootResourceId
      PathPart: 'chat'

  RouterChatResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockApiGateway
      ParentId: !GetAtt BedrockApiGateway.RootResourceId
      PathPart: 'router-chat'

  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockApiGateway
      ParentId: !GetAtt BedrockApiGateway.RootResourceId
      PathPart: 'health'

  # Chat POST Method (Direct Bedrock)
  ChatPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChatLambdaFunction.Arn}/invocations'

  # Chat OPTIONS Method (CORS)
  ChatOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockApiGateway
      ResourceId: !Ref ChatResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Router Chat POST Method (Intelligent Agent Routing)
  RouterChatPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockApiGateway
      ResourceId: !Ref RouterChatResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RouterChatLambdaFunction.Arn}/invocations'

  # Router Chat OPTIONS Method (CORS)
  RouterChatOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockApiGateway
      ResourceId: !Ref RouterChatResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Health GET Method
  HealthGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockApiGateway
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HealthLambdaFunction.Arn}/invocations'

  # Lambda Permissions
  ChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ChatLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${BedrockApiGateway}/*/POST/chat'

  RouterChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref RouterChatLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${BedrockApiGateway}/*/POST/router-chat'

  HealthLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HealthLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${BedrockApiGateway}/*/GET/health'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ChatPostMethod
      - ChatOptionsMethod
      - RouterChatPostMethod
      - RouterChatOptionsMethod
      - HealthGetMethod
    Properties:
      RestApiId: !Ref BedrockApiGateway
      StageName: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${BedrockApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  ChatEndpoint:
    Description: 'Chat API Endpoint (Direct Bedrock)'
    Value: !Sub 'https://${BedrockApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/chat'

  RouterChatEndpoint:
    Description: 'Router Chat API Endpoint (Intelligent Agent Routing)'
    Value: !Sub 'https://${BedrockApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/router-chat'

  HealthEndpoint:
    Description: 'Health Check Endpoint'
    Value: !Sub 'https://${BedrockApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/health'